
#include <stm32f30x.h> // Pull in include files for F30x standard drivers
#include <f3d_uart.h>
#include <f3d_user_btn.h>
#include <f3d_lcd_sd.h>
#include <f3d_i2c.h>
#include <f3d_accel.h>
#include <f3d_mag.h>
#include <f3d_delay.h>
#include <stdio.h>
#include <math.h>
#define TIMER 20000


int main(void) {
  setvbuf(stdin, NULL, _IONBF, 0);
  setvbuf(stdout, NULL, _IONBF, 0);
  setvbuf(stderr, NULL, _IONBF, 0);
  
  // Set up your inits before you go ahead
  f3d_delay_init();
  f3d_i2c1_init();
  delay(10);
  f3d_accel_init();
  delay(10);
  f3d_mag_init();
  delay(10);
  f3d_user_btn_init();
  delay(10);
  f3d_uart_init();
  delay(10);
  f3d_led_init();
  delay(10);
  f3d_lcd_init();
  delay(10);
  f3d_lcd_fillScreen(BLUE);
  f3d_led_all_off();


// initializations for variables
  float f[3];
  float x, y ,z; 
  float pitch, roll, heading, xH, yH;
  int usb_factor = 1;

// help functions 
// lab 6 

void lcd_draw_bar(uint16_t color, float f, uint8_t w ) {
  uint8_t x,y;
  f3d_lcd_setAddrWindow (0, w, f, w+5, MADCTLGRAPHICS);
  for (x=0;x< f;x++) {
    for (y=0; y<8 ; y++) {
      f3d_lcd_pushColor(&color,1);
    }
  }
}




while(1){
// lab 6 gyro display
f3d_gyro_getdata(b);

	  
        char string_x[10];
        char string_y[10];
        char string_z[10];
        
        one = b[0];
	if (one >= 0) {
	  sprintf(string_x,"%f", one);
	  f3d_lcd_drawChar( 5, 0, 'X', WHITE, RED );
	  f3d_lcd_drawString( 25, 0, string_x , WHITE, RED );
	  lcd_draw_bar(WHITE, one / 5, 15);
	} else {
	  
	  sprintf(string_x,"%f", one);
	  f3d_lcd_drawChar( 5, 0, 'X', WHITE, RED );
	  f3d_lcd_drawString( 25, 0, string_x , WHITE, RED );
	  one = one * -1;
	  lcd_draw_bar(BLACK, one / 5, 15);
	}
	
	two = b[1];
	if (two >= 0) {
	  sprintf(string_y," %f", two);
	  f3d_lcd_drawChar(5, 50, 'Y', WHITE, RED );
	  f3d_lcd_drawString(25, 50, string_y, WHITE, RED );
	  lcd_draw_bar(WHITE, two/5, 65 ); 
	}else{
	  
	  sprintf(string_y," %f", two);
	  f3d_lcd_drawChar(5, 50, 'Y', WHITE, RED );
	  f3d_lcd_drawString(25, 50, string_y, WHITE, RED );
	  two = two * -1;
	  lcd_draw_bar(BLACK, two/5, 65 );
	}


        three = b[2];
	if (three >= 0) {
	  sprintf(string_z," %f", three);
	  f3d_lcd_drawChar( 5, 100, 'Z', WHITE, RED );
	  f3d_lcd_drawString( 25, 100, string_z , WHITE, RED);  
	  lcd_draw_bar( WHITE, three/5, 115);
	} else {
	  
	  sprintf(string_z," %f", three);
	  f3d_lcd_drawChar( 5, 100, 'Z', WHITE, RED );
	  f3d_lcd_drawString( 25, 100, string_z , WHITE, RED); 
	  three *= -1;  
	  lcd_draw_bar( BLACK, three / 5, 115);
	}
     
	delay(50);
	lcd_draw_bar(RED, one / 5, 15);
	lcd_draw_bar(RED, two / 5, 65 );
	lcd_draw_bar(RED, three / 5, 115 );
//lab7 

    f3d_accel_read(f); 
    x = f[0];
    y = f[1];
    z = f[2];
    
    pitch = atan2f( x,  pow( pow( y, 2.0 ) + pow( z, 2.0 ), 0.5 ) ) ;
    
    roll = atan2f( y,  pow( pow( x, 2.0 ) + pow( z, 2.0 ), 0.5 ) ) ;
    

    f3d_mag_read(f);
    x = f[0];
    y = f[1];
    z = f[2];	
    xH = x * cosf(pitch) + z *sinf(pitch);
     yH = x * sinf(roll) * sinf(pitch) + (y * cosf(roll)) - (z * sin(roll) * cos(pitch) );

    heading = atan2f(yH, xH) * 180 /M_PI;

 


// lab7  board tilt angle 

int mx = ST7735_width / 2 + roll * 2 / M_PI * ST7735_width / 2;
      int my = ST7735_height / 2 + pitch * 2 / M_PI * ST7735_height / 2;
      
      int i;
      for(i = 0; i < 3; i++) {
	f3d_lcd_drawPixel(mx - i, my - i, WHITE);
	f3d_lcd_drawPixel(mx - i, my + i, WHITE);
	f3d_lcd_drawPixel(mx + i, my - i, WHITE);
	f3d_lcd_drawPixel(mx + i, my + i, WHITE);
      }
      delay(100);
      for(i = 0; i < 3; i++) {
	f3d_lcd_drawPixel(mx - i, my - i, BLUE);
	f3d_lcd_drawPixel(mx - i, my + i, BLUE);
	f3d_lcd_drawPixel(mx + i, my - i, BLUE);
	f3d_lcd_drawPixel(mx + i, my + i, BLUE);




// lab7 compass heading
      if(heading >= -157.5 && heading < -114.5)
	f3d_led_on(0);
      if(heading >= -114.5 && heading < -67.5)
	f3d_led_on(7);
      if(heading >= -67.5 && heading < -22.5)
	f3d_led_on(6);
      if(heading >= -22.5 && heading < 22.5)
	f3d_led_on(5);
      if(heading >= 22.5 && heading < 67.5)
	f3d_led_on(4);
      if(heading >= 67.5 && heading < 114.5)
	f3d_led_on(3);
      if(heading >= 114.5 && heading < 157.5)
	f3d_led_on(2);
      if(heading >= 157.5 || heading < -157.5)
	f3d_led_on(1);

      delay(50);
      f3d_led_all_off();

}




}


#ifdef USE_FULL_ASSERT
void assert_failed(uint8_t* file, uint32_t line) {
/* Infinite loop */
/* Use GDB to find out why we're here */
  while (1);
}
#endif
